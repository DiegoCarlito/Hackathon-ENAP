import streamlit as st
import os
from dotenv import load_dotenv
from bedrock_agent import BedrockAgentClient
import re

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Recomenda√ß√£o de Disciplinas - UnB",
    page_icon="üìö",
    layout="wide"
)

# Fun√ß√£o para extrair disciplinas da resposta
def extract_disciplinas(text):
    # Esta fun√ß√£o extrai os nomes das disciplinas do texto retornado pelo agente
    # Aqui estamos supondo que as disciplinas est√£o listadas em formato de lista
    # com n√∫meros, pontos ou tra√ßos. Ajuste conforme necess√°rio de acordo com o formato real.
    disciplinas = []
    
    # Procurar por padr√µes como "1. Nome da Disciplina" ou "- Nome da Disciplina"
    lines = text.split('\n')
    for line in lines:
        line = line.strip()
        # Verificar se a linha parece ser uma disciplina (come√ßa com n√∫mero ou tra√ßo)
        if re.match(r'^[\d\-\*\‚Ä¢]+\.?\s+', line):
            # Extrair o nome da disciplina removendo o prefixo
            disciplina_name = re.sub(r'^[\d\-\*\‚Ä¢]+\.?\s+', '', line)
            # Tamb√©m remover qualquer c√≥digo de disciplina no in√≠cio (ex: "CIC1234 - ")
            disciplina_name = re.sub(r'^[A-Z]{3}\d{4}\s*[\-:]\s*', '', disciplina_name)
            disciplinas.append(disciplina_name)
    
    # Se n√£o encontrar nada com o padr√£o acima, tente outro enfoque
    if not disciplinas:
        # Procurar por disciplinas destacadas em aspas ou entre colchetes
        disciplinas = re.findall(r'["\']([^"\']+)["\']|["\[\(]([^\]\)]+)[\]\)]', text)
        # Achatando a lista resultante
        disciplinas = [d[0] if d[0] else d[1] for d in disciplinas]
    
    return disciplinas

# T√≠tulo e descri√ß√£o
st.title("üìö Sistema de Recomenda√ß√£o de Disciplinas - UnB")
st.markdown("""
Este sistema utiliza intelig√™ncia artificial para recomendar disciplinas 
baseadas no seu curso e √°rea de interesse. As recomenda√ß√µes s√£o personalizadas
atrav√©s de um agente da AWS que acessa a Base de Conhecimento das disciplinas da UnB.
""")

# Sidebar para entrada de dados
st.sidebar.header("Informa√ß√µes do Estudante")

# Adicionando alguns cursos da UnB como exemplos
cursos = [
    "Ci√™ncia da Computa√ß√£o",
    "Engenharia de Software",
    "Engenharia Mec√¢nica",
    "Medicina",
    "Direito",
    "Psicologia",
    "Administra√ß√£o",
    "Outro (especifique abaixo)"
]

# Sele√ß√£o do curso
curso_selecionado = st.sidebar.selectbox("Selecione seu curso:", cursos)

# Campo adicional caso o curso seja "Outro"
if curso_selecionado == "Outro (especifique abaixo)":
    curso_personalizado = st.sidebar.text_input("Digite o nome do seu curso:")
    curso = curso_personalizado if curso_personalizado else "N√£o especificado"
else:
    curso = curso_selecionado

# √Årea de interesse
area_interesse = st.sidebar.text_input("Digite sua √°rea de interesse:")

# Inicializar session_state para armazenar o resultado
if 'recommendations_result' not in st.session_state:
    st.session_state.recommendations_result = None

if 'disciplinas_list' not in st.session_state:
    st.session_state.disciplinas_list = []

if 'disciplina_description' not in st.session_state:
    st.session_state.disciplina_description = None

# Bot√£o para obter recomenda√ß√µes
if st.sidebar.button("Obter Recomenda√ß√µes"):
    if not curso or not area_interesse:
        st.error("Por favor, preencha todos os campos antes de continuar.")
    else:
        with st.spinner("Consultando o sistema de recomenda√ß√µes..."):
            try:
                # Instanciar o cliente do Bedrock Agent
                bedrock_client = BedrockAgentClient()
                
                # Obter recomenda√ß√µes
                resultado = bedrock_client.get_recommendations(curso, area_interesse)
                
                # Armazenar o resultado no session_state
                st.session_state.recommendations_result = resultado
                
                # Extrair lista de disciplinas se houver recomenda√ß√µes
                if resultado['success']:
                    disciplinas = extract_disciplinas(resultado['recommendations'])
                    st.session_state.disciplinas_list = disciplinas
                    st.session_state.disciplina_description = None  # Limpar descri√ß√£o anterior
                
            except Exception as e:
                st.error(f"Ocorreu um erro inesperado: {str(e)}")
                st.info("Verifique se todas as vari√°veis de ambiente da AWS est√£o configuradas corretamente.")

# Se houver recomenda√ß√µes, exibi-las
if st.session_state.recommendations_result and st.session_state.recommendations_result['success']:
    resultado = st.session_state.recommendations_result
    
    st.success("Recomenda√ß√µes obtidas com sucesso!")
    
    # Container principal para as recomenda√ß√µes
    with st.container():
        st.subheader("Recomenda√ß√µes de Disciplinas")
        st.markdown(f"**Curso:** {curso}")
        st.markdown(f"**√Årea de Interesse:** {area_interesse}")
        
        # Exibir as recomenda√ß√µes em um bloco destacado
        st.markdown("### Disciplinas Recomendadas")
        st.markdown(resultado['recommendations'])
        
        # Select box para escolher uma disciplina e ver mais detalhes
        if st.session_state.disciplinas_list:
            st.subheader("Obter mais informa√ß√µes sobre uma disciplina")
            selected_disciplina = st.selectbox(
                "Selecione uma disciplina para saber mais:",
                [""] + st.session_state.disciplinas_list
            )
            
            if selected_disciplina:
                # Bot√£o para obter detalhes da disciplina
                if st.button(f"Ver detalhes de '{selected_disciplina}'"):
                    with st.spinner(f"Obtendo informa√ß√µes sobre {selected_disciplina}..."):
                        try:
                            # Instanciar o cliente do Bedrock Agent (ou usar o existente)
                            bedrock_client = BedrockAgentClient()
                            
                            # Obter descri√ß√£o da disciplina
                            desc_resultado = bedrock_client.disciplina_description(selected_disciplina)
                            
                            # Armazenar o resultado no session_state
                            st.session_state.disciplina_description = desc_resultado
                            
                        except Exception as e:
                            st.error(f"Ocorreu um erro ao obter detalhes: {str(e)}")
            
            # Se houver uma descri√ß√£o dispon√≠vel, exibi-la
            if st.session_state.disciplina_description and st.session_state.disciplina_description['success']:
                st.subheader(f"Sobre a disciplina: {selected_disciplina}")
                st.markdown(st.session_state.disciplina_description['description'])
        
        # Nota sobre as recomenda√ß√µes
        st.info("""
        **Nota:** Estas recomenda√ß√µes s√£o geradas por um sistema de IA e devem ser consideradas como 
        sugest√µes. Sempre consulte o coordenador do seu curso ou o sistema oficial da UnB para 
        confirmar a disponibilidade e adequa√ß√£o das disciplinas ao seu curr√≠culo.
        """)

# Informa√ß√µes adicionais no rodap√©
st.sidebar.markdown("---")
st.sidebar.markdown("### Sobre o Sistema")
st.sidebar.info("""
Este sistema utiliza o Amazon Bedrock para fornecer recomenda√ß√µes
personalizadas de disciplinas baseadas na Base de Conhecimento da UnB.
""")

# √Årea principal - instru√ß√µes iniciais (mostradas apenas quando n√£o h√° resultado)
if 'recommendations_result' not in st.session_state or st.session_state.recommendations_result is None:
    with st.container():
        st.info("""
        üëà Para come√ßar, preencha as informa√ß√µes no painel lateral e clique em "Obter Recomenda√ß√µes".
        
        O sistema analisar√° seu perfil e fornecer√° sugest√µes de disciplinas que podem
        ser interessantes para sua forma√ß√£o acad√™mica.
        """)
        
        # Exemplos de como usar
        st.markdown("### Exemplos de uso")
        st.markdown("""
        - **Exemplo 1:** Curso de Ci√™ncia da Computa√ß√£o com interesse em Intelig√™ncia Artificial
        - **Exemplo 2:** Curso de Engenharia Mec√¢nica com interesse em Energia Renov√°vel
        - **Exemplo 3:** Curso de Psicologia com interesse em Neuroci√™ncia
        """)

# Adicione esta fun√ß√£o ap√≥s a defini√ß√£o do layout principal e antes da verifica√ß√£o de vari√°veis de ambiente

def create_alias_instructions():
    st.error("Seu agente n√£o possui um alias. √â necess√°rio criar um alias antes de poder usar o agente.")
    
    st.markdown("""
    ### Como criar um alias para seu agente:
    
    1. Acesse o [console AWS Bedrock](https://console.aws.amazon.com/bedrock)
    2. No menu lateral, clique em "Agentes"
    3. Selecione seu agente "grade-agent"
    4. Clique no bot√£o "Criar alias" no topo da p√°gina
    5. Defina um nome para o alias (ex: "prod")
    6. Selecione a vers√£o mais recente do agente
    7. Clique em "Criar"
    8. Ap√≥s a cria√ß√£o, copie o ID do alias criado
    9. Adicione o ID copiado √† vari√°vel de ambiente `BEDROCK_AGENT_ALIAS_ID` no arquivo `.env`
    """)
    
    st.info("Ap√≥s criar o alias, reinicie esta aplica√ß√£o para que as altera√ß√µes sejam aplicadas.")

# Executar o app
if __name__ == "__main__":
    # Verificar se as vari√°veis de ambiente necess√°rias est√£o configuradas
    required_vars = ['AWS_DEFAULT_REGION', 'AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY']
    missing_vars = [var for var in required_vars if not os.environ.get(var)]
    
    if missing_vars:
        st.error(f"Faltam as seguintes vari√°veis de ambiente: {', '.join(missing_vars)}")
        st.stop() 